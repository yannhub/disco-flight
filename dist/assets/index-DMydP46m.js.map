{"version":3,"file":"index-DMydP46m.js","sources":["../../src/assets/disco-music.mp3","../../src/assets/explosion.mp3","../../src/main.ts"],"sourcesContent":["export default \"__VITE_ASSET__DvnbOQ5g__\"","export default \"__VITE_ASSET__qcV2XDW4__\"","import \"./style.css\";\n\n// Types\ntype GameState = \"welcome\" | \"playing\" | \"gameover\";\ntype Screen =\n  | \"welcome-screen\"\n  | \"orientation-screen\"\n  | \"game-screen\"\n  | \"gameover-screen\";\n\n// Constants\nconst MAX_TILT = 45;\nconst DETECTION_MAX_TIME = 30; // seconds\nconst DISCO_COOLDOWN = 5; // seconds\nconst COPILOT_BASE_SPEED = 1; // Base speed for copilot movement\nconst PLANE_TILT_CHANGE_INTERVAL = 3000; // ms\nconst TILT_SMOOTHING_FACTOR = 0.05; // Controls how smoothly the tilt changes\nconst GYRO_COMPENSATION_FACTOR = -0.8; // Force de la compensation gyroscopique\nconst DEBUG_MODE = false; // Flag pour afficher/masquer la fenêtre de debug\n\n// Game variables\nlet gameState: GameState = \"welcome\";\nlet planeAssiette = 0;\nlet targetPlaneAssiette = 0; // New variable to store the target tilt\nlet detectionLevel = 0;\nlet isDiscoMode = false;\nlet discoTimeout: number | null = null;\nlet lastTiltChange = Date.now();\nlet playerTilt = 0; // Nouvelle variable pour stocker l'inclinaison du joueur\n\n// Audio elements\nlet engineSound: AudioContext;\nlet oscillator: OscillatorNode;\nlet gainNode: GainNode;\n\n// Import assets\nimport discoMusicSrc from \"./assets/disco-music.mp3\";\nimport explosionSoundSrc from \"./assets/explosion.mp3\";\n\n// Load audio files\nconst discoMusic = new Audio(discoMusicSrc);\nconst explosionSound = new Audio(explosionSoundSrc);\n\n// DOM Elements\nconst welcomeScreen = document.getElementById(\"welcome-screen\")!;\nconst orientationScreen = document.getElementById(\"orientation-screen\")!;\nconst gameScreen = document.getElementById(\"game-screen\")!;\nconst gameoverScreen = document.getElementById(\"gameover-screen\")!;\nconst startButton = document.getElementById(\"start-button\")!;\nconst restartButton = document.getElementById(\"restart-button\")!;\nconst skyVideo = document.querySelector<HTMLVideoElement>(\"#sky-video\")!;\nconst copilot = document.querySelector<HTMLImageElement>(\"#copilot\")!;\nconst detectionBar = document.getElementById(\"detection-bar\")!;\n\n// Create debug window\nconst debugWindow = document.createElement(\"div\");\ndebugWindow.id = \"debug-window\";\ndebugWindow.style.display = DEBUG_MODE ? \"block\" : \"none\";\ndocument.body.appendChild(debugWindow);\n\n// Game functions\nfunction showScreen(screenId: Screen) {\n  [welcomeScreen, orientationScreen, gameScreen, gameoverScreen].forEach(\n    (screen) => {\n      screen.classList.add(\"hidden\");\n    }\n  );\n  document.getElementById(screenId)!.classList.remove(\"hidden\");\n}\n\nfunction checkOrientation() {\n  if (window.innerHeight > window.innerWidth) {\n    showScreen(\"orientation-screen\");\n    if (gameState === \"playing\") {\n      // Pause game elements\n      skyVideo.pause();\n      if (engineSound) {\n        oscillator.stop();\n      }\n    }\n    return false;\n  } else {\n    // If we were in orientation screen and now in correct orientation\n    if (\n      document\n        .getElementById(\"orientation-screen\")\n        ?.classList.contains(\"hidden\") === false\n    ) {\n      if (gameState === \"playing\") {\n        // Resume game elements\n        showScreen(\"game-screen\");\n        skyVideo.play();\n        // Reinitialize audio context as it might have been stopped\n        if (engineSound) {\n          oscillator = engineSound.createOscillator();\n          oscillator.connect(gainNode);\n          oscillator.type = \"sawtooth\";\n          oscillator.start();\n        }\n      } else {\n        showScreen(\n          gameState === \"welcome\" ? \"welcome-screen\" : \"gameover-screen\"\n        );\n      }\n    }\n    return true;\n  }\n}\n\nfunction updateDetectionBar() {\n  const percentage = (detectionLevel / DETECTION_MAX_TIME) * 100;\n  detectionBar.style.setProperty(\"--detection-percentage\", `${percentage}%`);\n}\n\nfunction startDiscoMode() {\n  if (isDiscoMode) return;\n\n  isDiscoMode = true;\n  gameScreen.classList.add(\"disco-mode\");\n  discoMusic.currentTime = 0;\n  discoMusic.play();\n\n  if (discoTimeout) {\n    clearTimeout(discoTimeout);\n  }\n  discoTimeout = window.setTimeout(() => {\n    stopDiscoMode();\n  }, DISCO_COOLDOWN * 1000);\n}\n\nfunction stopDiscoMode() {\n  if (!isDiscoMode) return;\n\n  isDiscoMode = false;\n  gameScreen.classList.remove(\"disco-mode\");\n  discoMusic.pause();\n  discoMusic.currentTime = 0;\n\n  if (discoTimeout) {\n    clearTimeout(discoTimeout);\n    discoTimeout = null;\n  }\n}\n\nfunction updateEngineSound() {\n  const baseFrequency = 100;\n  const frequencyRange = 50;\n  oscillator.frequency.value =\n    baseFrequency + (planeAssiette / MAX_TILT) * frequencyRange;\n}\n\nfunction updatePlaneAssiette() {\n  const now = Date.now();\n  if (now - lastTiltChange > PLANE_TILT_CHANGE_INTERVAL) {\n    // Reduce the maximum change amount to make transitions less abrupt\n    const maxChange = MAX_TILT * 0.7;\n    targetPlaneAssiette = Math.random() * maxChange * 2 - maxChange;\n    lastTiltChange = now;\n  }\n\n  // Smoothly interpolate between current and target tilt\n  planeAssiette +=\n    (targetPlaneAssiette - planeAssiette) * TILT_SMOOTHING_FACTOR;\n}\n\nfunction updateCopilotPosition() {\n  // Calculate copilot movement speed based on plane tilt\n  const tiltPercentage = Math.abs(planeAssiette) / MAX_TILT;\n  const movementSpeed = COPILOT_BASE_SPEED * tiltPercentage;\n\n  // Get current position as percentage (default to 50 if not set)\n  const currentPosition = parseFloat(copilot.style.left) || 50;\n\n  // Calculate new position with both plane tilt and player compensation\n  let newPosition = currentPosition;\n\n  // 1. Mouvement dû à l'inclinaison de l'avion\n  if (planeAssiette !== 0) {\n    const planeTiltDirection = planeAssiette > 0 ? 1 : -1;\n    newPosition += planeTiltDirection * movementSpeed;\n  }\n\n  // 2. Compensation du joueur (dans la direction opposée)\n  // Si le joueur penche à gauche (négatif), on pousse le copilote vers la gauche\n  if (playerTilt !== 0) {\n    const compensationForce =\n      (playerTilt / MAX_TILT) * GYRO_COMPENSATION_FACTOR;\n    newPosition -= compensationForce; // On soustrait car on veut aller dans la direction du tilt\n  }\n\n  // Limit position to screen bounds (10% to 90% to keep copilot visible)\n  newPosition = Math.max(10, Math.min(90, newPosition));\n\n  // Update copilot position\n  copilot.style.left = `${newPosition}%`;\n\n  // Check if copilot hits the edges\n  if (newPosition <= 10 || newPosition >= 90) {\n    startDiscoMode();\n  }\n}\n\nfunction updateDebugInfo() {\n  if (!DEBUG_MODE) return;\n\n  debugWindow.innerHTML = `\n    <div class=\"debug-content\">\n      <h3>Debug Info</h3>\n      <p>Gyroscope (beta): ${playerTilt.toFixed(2)}°</p>\n      <p>Plane Tilt: ${planeAssiette.toFixed(2)}°</p>\n      <p>Copilot Position: ${(parseFloat(copilot.style.left) || 50).toFixed(\n        2\n      )}%</p>\n    </div>\n  `;\n}\n\nfunction updateGameState() {\n  if (!checkOrientation()) return;\n\n  if (gameState === \"playing\") {\n    updatePlaneAssiette();\n    updateCopilotPosition();\n    updateEngineSound();\n    updateDebugInfo();\n\n    if (isDiscoMode) {\n      detectionLevel += 1 / 60;\n      updateDetectionBar();\n\n      if (detectionLevel >= DETECTION_MAX_TIME) {\n        gameState = \"gameover\";\n        handleGameOver();\n      }\n    }\n\n    // Update only sky video rotation, not the cockpit\n    skyVideo.style.transform = `rotate(${-planeAssiette}deg)`;\n\n    requestAnimationFrame(updateGameState);\n  }\n}\n\nfunction handleDeviceOrientation(event: DeviceOrientationEvent) {\n  if (gameState === \"playing\") {\n    // En mode paysage, beta contrôle l'inclinaison gauche/droite\n    playerTilt = event.beta || 0;\n  }\n}\n\nfunction startGame() {\n  if (!checkOrientation()) return;\n\n  gameState = \"playing\";\n  detectionLevel = 0;\n  planeAssiette = 0;\n  targetPlaneAssiette = 0;\n  isDiscoMode = false;\n\n  // Initialize audio context after user interaction\n  engineSound = new AudioContext();\n  oscillator = engineSound.createOscillator();\n  gainNode = engineSound.createGain();\n  oscillator.connect(gainNode);\n  gainNode.connect(engineSound.destination);\n  oscillator.type = \"sawtooth\";\n  gainNode.gain.value = 0.1;\n\n  showScreen(\"game-screen\");\n  skyVideo.play();\n  oscillator.start();\n\n  updateGameState();\n}\n\nfunction handleGameOver() {\n  gameState = \"gameover\";\n  showScreen(\"gameover-screen\");\n  stopDiscoMode();\n  oscillator.stop();\n  explosionSound.play();\n\n  setTimeout(() => {\n    restartButton.classList.remove(\"hidden\");\n  }, 5000);\n}\n\n// Event Listeners\nstartButton.addEventListener(\"click\", startGame);\nrestartButton.addEventListener(\"click\", startGame);\nwindow.addEventListener(\"orientationchange\", () => {\n  // Wait for the orientation change to complete\n  setTimeout(checkOrientation, 100);\n});\nwindow.addEventListener(\"resize\", () => {\n  // Wait for the resize to complete\n  setTimeout(checkOrientation, 100);\n});\nwindow.addEventListener(\"deviceorientation\", handleDeviceOrientation);\n\n// Initialize\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  showScreen(\"welcome-screen\");\n\n  // Request device orientation permission on iOS\n  if (typeof (DeviceOrientationEvent as any).requestPermission === \"function\") {\n    startButton.addEventListener(\"click\", async () => {\n      try {\n        const permission = await (DeviceOrientationEvent as any).requestPermission();\n        if (permission === \"granted\") {\n          startGame();\n        }\n      } catch (error) {\n        console.error(\"Permission denied:\", error);\n      }\n    });\n  }\n});\n"],"names":["discoMusicSrc","explosionSoundSrc","MAX_TILT","DETECTION_MAX_TIME","DISCO_COOLDOWN","COPILOT_BASE_SPEED","PLANE_TILT_CHANGE_INTERVAL","TILT_SMOOTHING_FACTOR","GYRO_COMPENSATION_FACTOR","gameState","planeAssiette","targetPlaneAssiette","detectionLevel","isDiscoMode","discoTimeout","lastTiltChange","playerTilt","engineSound","oscillator","gainNode","discoMusic","explosionSound","welcomeScreen","orientationScreen","gameScreen","gameoverScreen","startButton","restartButton","skyVideo","copilot","detectionBar","debugWindow","showScreen","screenId","screen","checkOrientation","_a","updateDetectionBar","percentage","startDiscoMode","stopDiscoMode","updateEngineSound","updatePlaneAssiette","now","maxChange","updateCopilotPosition","tiltPercentage","movementSpeed","newPosition","planeTiltDirection","compensationForce","updateGameState","handleGameOver","handleDeviceOrientation","event","startGame","error"],"mappings":"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"}