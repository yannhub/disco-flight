{"version":3,"file":"index-CvKhl1Ef.js","sources":["../../src/assets/disco-music.mp3","../../src/assets/explosion.mp3","../../src/main.ts"],"sourcesContent":["export default \"__VITE_ASSET__DvnbOQ5g__\"","export default \"__VITE_ASSET__qcV2XDW4__\"","import \"./style.css\";\r\n\r\n// Types\r\ntype GameState = \"welcome\" | \"playing\" | \"gameover\";\r\ntype Screen =\r\n  | \"welcome-screen\"\r\n  | \"orientation-screen\"\r\n  | \"game-screen\"\r\n  | \"gameover-screen\";\r\n\r\n// Constants\r\nconst MAX_TILT = 45;\r\nconst DETECTION_MAX_TIME = 30; // seconds\r\nconst DISCO_COOLDOWN = 5; // seconds\r\nconst COPILOT_BASE_SPEED = 4; // Base speed for copilot movement\r\nconst PLANE_TILT_CHANGE_INTERVAL = 3000; // ms\r\nconst TILT_SMOOTHING_FACTOR = 0.05; // Controls how smoothly the tilt changes\r\nconst GYRO_COMPENSATION_FACTOR = -4; // Force de la compensation gyroscopique\r\nconst DEBUG_MODE = false; // Flag pour afficher/masquer la fenêtre de debug\r\n\r\n// Game variables\r\nlet gameState: GameState = \"welcome\";\r\nlet landscapeMode = false;\r\nlet planeAssiette = 0;\r\nlet targetPlaneAssiette = 0; // New variable to store the target tilt\r\nlet detectionLevel = 0;\r\nlet isDiscoMode = false;\r\nlet discoTimeout: number | null = null;\r\nlet lastTiltChange = Date.now();\r\nlet playerTilt = 0; // Nouvelle variable pour stocker l'inclinaison du joueur\r\nlet discoMusicPosition = 0; // Store the music position when pausing\r\nlet lastFrameTime = 0; // Store last frame timestamp\r\n\r\n// Audio elements\r\nlet engineSound: AudioContext;\r\nlet oscillator: OscillatorNode;\r\nlet gainNode: GainNode;\r\n\r\n// Import assets\r\nimport discoMusicSrc from \"./assets/disco-music.mp3\";\r\nimport explosionSoundSrc from \"./assets/explosion.mp3\";\r\n\r\n// Load audio files\r\nconst discoMusic = new Audio(discoMusicSrc);\r\nconst explosionSound = new Audio(explosionSoundSrc);\r\n\r\n// DOM Elements\r\nconst welcomeScreen = document.getElementById(\"welcome-screen\")!;\r\nconst orientationScreen = document.getElementById(\"orientation-screen\")!;\r\nconst gameScreen = document.getElementById(\"game-screen\")!;\r\nconst gameoverScreen = document.getElementById(\"gameover-screen\")!;\r\nconst startButton = document.getElementById(\"start-button\")!;\r\nconst restartButton = document.getElementById(\"restart-button\")!;\r\nconst skyVideo = document.querySelector<HTMLVideoElement>(\"#sky-video\")!;\r\nconst copilot = document.querySelector<HTMLImageElement>(\"#copilot\")!;\r\nconst detectionBar = document.getElementById(\"detection-bar\")!;\r\n\r\n// Create debug window\r\nconst debugWindow = document.createElement(\"div\");\r\ndebugWindow.id = \"debug-window\";\r\ndebugWindow.style.display = DEBUG_MODE ? \"block\" : \"none\";\r\ndocument.body.appendChild(debugWindow);\r\n\r\n// PWA Installation\r\nlet deferredPrompt: any;\r\nconst installButton = document.createElement(\"button\");\r\ninstallButton.classList.add(\"install-button\");\r\ninstallButton.textContent = \"Installer l'application\";\r\ninstallButton.style.display = \"none\";\r\ndocument.body.appendChild(installButton);\r\n\r\nwindow.addEventListener(\"beforeinstallprompt\", (e) => {\r\n  e.preventDefault();\r\n  deferredPrompt = e;\r\n  installButton.style.display = \"block\";\r\n});\r\n\r\ninstallButton.addEventListener(\"click\", async () => {\r\n  if (deferredPrompt) {\r\n    deferredPrompt.prompt();\r\n    const { outcome } = await deferredPrompt.userChoice;\r\n    if (outcome === \"accepted\") {\r\n      console.log(\"Application installée\");\r\n    }\r\n    deferredPrompt = null;\r\n    installButton.style.display = \"none\";\r\n  }\r\n});\r\n\r\nwindow.addEventListener(\"appinstalled\", () => {\r\n  console.log(\"Application installée avec succès\");\r\n  installButton.style.display = \"none\";\r\n  deferredPrompt = null;\r\n});\r\n\r\n// Game functions\r\nfunction showScreen(screenId: Screen) {\r\n  [welcomeScreen, orientationScreen, gameScreen, gameoverScreen].forEach(\r\n    (screen) => {\r\n      screen.classList.add(\"hidden\");\r\n    }\r\n  );\r\n  document.getElementById(screenId)!.classList.remove(\"hidden\");\r\n}\r\n\r\nfunction checkOrientation() {\r\n  if (window.innerHeight > window.innerWidth) {\r\n    landscapeMode = false;\r\n    if (gameState === \"playing\") {\r\n      showScreen(\"orientation-screen\");\r\n      // Pause game elements\r\n      skyVideo.pause();\r\n      if (engineSound) {\r\n        oscillator.stop();\r\n      }\r\n    }\r\n    return false;\r\n  } else {\r\n    landscapeMode = true;\r\n    // If we were in orientation screen and now in correct orientation\r\n    if (\r\n      document\r\n        .getElementById(\"orientation-screen\")\r\n        ?.classList.contains(\"hidden\") === false\r\n    ) {\r\n      if (gameState === \"playing\") {\r\n        // Resume game elements\r\n        showScreen(\"game-screen\");\r\n        skyVideo.play();\r\n        // Reinitialize audio context as it might have been stopped\r\n        if (engineSound) {\r\n          oscillator = engineSound.createOscillator();\r\n          oscillator.connect(gainNode);\r\n          oscillator.type = \"sawtooth\";\r\n          oscillator.start();\r\n        }\r\n        updateGameState(performance.now());\r\n      } else {\r\n        showScreen(\r\n          gameState === \"welcome\" ? \"welcome-screen\" : \"gameover-screen\"\r\n        );\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\nfunction updateDetectionBar() {\r\n  const percentage = (detectionLevel / DETECTION_MAX_TIME) * 100;\r\n  detectionBar.style.setProperty(\"--detection-percentage\", `${percentage}%`);\r\n}\r\n\r\nfunction startDiscoMode() {\r\n  if (isDiscoMode) {\r\n    if (discoTimeout) {\r\n      clearTimeout(discoTimeout);\r\n    }\r\n    discoTimeout = window.setTimeout(() => {\r\n      stopDiscoMode();\r\n    }, DISCO_COOLDOWN * 1000);\r\n    return;\r\n  }\r\n\r\n  isDiscoMode = true;\r\n  gameScreen.classList.add(\"disco-mode\");\r\n  discoMusic.currentTime = discoMusicPosition;\r\n  discoMusic.play();\r\n}\r\n\r\nfunction stopDiscoMode() {\r\n  if (!isDiscoMode) return;\r\n\r\n  isDiscoMode = false;\r\n  gameScreen.classList.remove(\"disco-mode\");\r\n  discoMusicPosition = discoMusic.currentTime;\r\n  discoMusic.pause();\r\n\r\n  if (discoTimeout) {\r\n    clearTimeout(discoTimeout);\r\n    discoTimeout = null;\r\n  }\r\n}\r\n\r\nfunction updateEngineSound() {\r\n  const baseFrequency = 100;\r\n  const frequencyRange = 50;\r\n  oscillator.frequency.value =\r\n    baseFrequency + (planeAssiette / MAX_TILT) * frequencyRange;\r\n}\r\n\r\nfunction updatePlaneAssiette() {\r\n  const now = Date.now();\r\n  if (now - lastTiltChange > PLANE_TILT_CHANGE_INTERVAL) {\r\n    // Reduce the maximum change amount to make transitions less abrupt\r\n    const maxChange = MAX_TILT * 0.7;\r\n    targetPlaneAssiette = Math.random() * maxChange * 2 - maxChange;\r\n    lastTiltChange = now;\r\n  }\r\n\r\n  // Smoothly interpolate between current and target tilt\r\n  planeAssiette +=\r\n    (targetPlaneAssiette - planeAssiette) * TILT_SMOOTHING_FACTOR;\r\n}\r\n\r\nfunction updateCopilotPosition() {\r\n  // Calculate copilot movement speed based on plane tilt\r\n  const tiltPercentage = Math.abs(planeAssiette) / MAX_TILT;\r\n  const movementSpeed = COPILOT_BASE_SPEED * tiltPercentage;\r\n\r\n  // Get current position as percentage (default to 50 if not set)\r\n  const currentPosition = parseFloat(copilot.style.left) || 50;\r\n\r\n  // Calculate new position with both plane tilt and player compensation\r\n  let newPosition = currentPosition;\r\n\r\n  // 1. Mouvement dû à l'inclinaison de l'avion\r\n  if (planeAssiette !== 0) {\r\n    const planeTiltDirection = planeAssiette > 0 ? 1 : -1;\r\n    newPosition += planeTiltDirection * movementSpeed;\r\n  }\r\n\r\n  // 2. Compensation du joueur (dans la direction opposée)\r\n  // Si le joueur penche à gauche (négatif), on pousse le copilote vers la gauche\r\n  if (playerTilt !== 0) {\r\n    const compensationForce =\r\n      (playerTilt / MAX_TILT) * GYRO_COMPENSATION_FACTOR;\r\n    newPosition -= compensationForce; // On soustrait car on veut aller dans la direction du tilt\r\n  }\r\n\r\n  // Limit position to screen bounds (10% to 90% to keep copilot visible)\r\n  newPosition = Math.max(10, Math.min(90, newPosition));\r\n\r\n  // Update copilot position\r\n  copilot.style.left = `${newPosition}%`;\r\n\r\n  // Check if copilot hits the edges\r\n  if (newPosition <= 10 || newPosition >= 90) {\r\n    startDiscoMode();\r\n  }\r\n}\r\n\r\nfunction updateDebugInfo() {\r\n  if (!DEBUG_MODE) return;\r\n\r\n  debugWindow.innerHTML = `\r\n    <div class=\"debug-content\">\r\n      <h3>Debug Info</h3>\r\n      <p>Gyroscope (beta): ${playerTilt.toFixed(2)}°</p>\r\n      <p>Plane Tilt: ${planeAssiette.toFixed(2)}°</p>\r\n      <p>Copilot Position: ${(parseFloat(copilot.style.left) || 50).toFixed(\r\n        2\r\n      )}%</p>\r\n    </div>\r\n  `;\r\n}\r\n\r\nfunction updateGameState(timestamp: number) {\r\n  if (gameState === \"playing\" && landscapeMode) {\r\n    // Calculate delta time in seconds\r\n    const deltaTime = (timestamp - lastFrameTime) / 1000;\r\n    lastFrameTime = timestamp;\r\n\r\n    updatePlaneAssiette();\r\n    updateCopilotPosition();\r\n    updateEngineSound();\r\n    updateDebugInfo();\r\n\r\n    if (isDiscoMode) {\r\n      detectionLevel += deltaTime; // Use actual time elapsed instead of fixed 1/60\r\n      updateDetectionBar();\r\n\r\n      if (detectionLevel >= DETECTION_MAX_TIME) {\r\n        gameState = \"gameover\";\r\n        handleGameOver();\r\n      }\r\n    }\r\n\r\n    // Update only sky video rotation, not the cockpit\r\n    skyVideo.style.transform = `rotate(${-planeAssiette}deg)`;\r\n\r\n    requestAnimationFrame(updateGameState);\r\n  }\r\n}\r\n\r\nfunction handleDeviceOrientation(event: DeviceOrientationEvent) {\r\n  if (gameState === \"playing\") {\r\n    // En mode paysage, beta contrôle l'inclinaison gauche/droite\r\n    playerTilt = event.beta || 0;\r\n  }\r\n}\r\n\r\nfunction requestFullscreen() {\r\n  const element = document.documentElement;\r\n  if (element.requestFullscreen) {\r\n    element.requestFullscreen();\r\n  }\r\n}\r\n\r\nfunction startGame() {\r\n  gameState = \"playing\";\r\n  detectionLevel = 0;\r\n  planeAssiette = 0;\r\n  targetPlaneAssiette = 0;\r\n  isDiscoMode = false;\r\n  lastFrameTime = performance.now(); // Initialize the last frame time\r\n\r\n  // Initialize audio context after user interaction\r\n  engineSound = new AudioContext();\r\n  oscillator = engineSound.createOscillator();\r\n  gainNode = engineSound.createGain();\r\n  oscillator.connect(gainNode);\r\n  gainNode.connect(engineSound.destination);\r\n  oscillator.type = \"sawtooth\";\r\n  gainNode.gain.value = 0.1;\r\n\r\n  checkOrientation();\r\n  showScreen(\"game-screen\");\r\n  skyVideo.play();\r\n  oscillator.start();\r\n\r\n  requestFullscreen();\r\n\r\n  requestAnimationFrame(updateGameState); // Start the game loop\r\n}\r\n\r\nfunction handleGameOver() {\r\n  gameState = \"gameover\";\r\n  showScreen(\"gameover-screen\");\r\n  stopDiscoMode();\r\n  oscillator.stop();\r\n  explosionSound.play();\r\n\r\n  setTimeout(() => {\r\n    restartButton.classList.remove(\"hidden\");\r\n  }, 2000);\r\n}\r\n\r\n// Event Listeners\r\nstartButton.addEventListener(\"click\", startGame);\r\nrestartButton.addEventListener(\"click\", startGame);\r\nwindow.addEventListener(\"orientationchange\", () => {\r\n  // Wait for the orientation change to complete\r\n  setTimeout(checkOrientation, 100);\r\n});\r\nwindow.addEventListener(\"resize\", () => {\r\n  // Wait for the resize to complete\r\n  setTimeout(checkOrientation, 100);\r\n});\r\nwindow.addEventListener(\"deviceorientation\", handleDeviceOrientation);\r\n\r\n// Initialize\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n  showScreen(\"welcome-screen\");\r\n\r\n  // Request device orientation permission on iOS\r\n  if (typeof (DeviceOrientationEvent as any).requestPermission === \"function\") {\r\n    startButton.addEventListener(\"click\", async () => {\r\n      try {\r\n        const permission = await (\r\n          DeviceOrientationEvent as any\r\n        ).requestPermission();\r\n        if (permission === \"granted\") {\r\n          startGame();\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Permission denied:\", error);\r\n      }\r\n    });\r\n  }\r\n});\r\n"],"names":["discoMusicSrc","explosionSoundSrc","MAX_TILT","DETECTION_MAX_TIME","DISCO_COOLDOWN","COPILOT_BASE_SPEED","PLANE_TILT_CHANGE_INTERVAL","TILT_SMOOTHING_FACTOR","GYRO_COMPENSATION_FACTOR","gameState","landscapeMode","planeAssiette","targetPlaneAssiette","detectionLevel","isDiscoMode","discoTimeout","lastTiltChange","playerTilt","discoMusicPosition","lastFrameTime","engineSound","oscillator","gainNode","discoMusic","explosionSound","welcomeScreen","orientationScreen","gameScreen","gameoverScreen","startButton","restartButton","skyVideo","copilot","detectionBar","debugWindow","deferredPrompt","installButton","outcome","showScreen","screenId","screen","checkOrientation","_a","updateGameState","updateDetectionBar","percentage","startDiscoMode","stopDiscoMode","updateEngineSound","updatePlaneAssiette","now","maxChange","updateCopilotPosition","tiltPercentage","movementSpeed","newPosition","planeTiltDirection","compensationForce","timestamp","deltaTime","handleGameOver","handleDeviceOrientation","event","requestFullscreen","element","startGame","error"],"mappings":"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"}