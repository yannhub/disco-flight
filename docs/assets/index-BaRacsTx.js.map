{"version":3,"file":"index-BaRacsTx.js","sources":["../../src/assets/disco-music.mp3","../../src/assets/explosion.mp3","../../src/main.ts"],"sourcesContent":["export default \"__VITE_ASSET__DvnbOQ5g__\"","export default \"__VITE_ASSET__qcV2XDW4__\"","import \"./style.css\";\n\n// Types\ntype GameState = \"welcome\" | \"playing\" | \"gameover\";\ntype Screen =\n  | \"welcome-screen\"\n  | \"orientation-screen\"\n  | \"game-screen\"\n  | \"gameover-screen\";\n\n// Constants\nconst MAX_TILT = 45;\nconst DETECTION_MAX_TIME = 20; // seconds\nconst DISCO_COOLDOWN = 3; // seconds\nconst COPILOT_BASE_SPEED = 3; // Base speed for copilot movement\nconst PLANE_TILT_CHANGE_INTERVAL = 1000; // ms\nconst TILT_SMOOTHING_FACTOR = 0.04; // Controls how smoothly the tilt changes\nconst PLAYER_TILT_SMOOTHING_FACTOR = 0.01;\nconst GYRO_COMPENSATION_FACTOR = -4; // Force de la compensation gyroscopique\nconst DEBUG_MODE = false; // Flag pour afficher/masquer la fenêtre de debug\n\n// Game variables\nlet gameState: GameState = \"welcome\";\nlet landscapeMode = false;\nlet planeAssiette = 0;\nlet targetPlaneAssiette = 0; // New variable to store the target tilt\nlet detectionLevel = 0;\nlet isDiscoMode = false;\nlet discoTimeout: number | null = null;\nlet lastTiltChange = Date.now();\nlet playerTilt = 0; // Nouvelle variable pour stocker l'inclinaison du joueur\nlet discoMusicPosition = 0; // Store the music position when pausing\nlet lastFrameTime = 0; // Store last frame timestamp\nlet gameStartTime = 0;\nlet currentTime = 0;\n\n// Audio elements\nlet engineSound: AudioContext;\nlet oscillator: OscillatorNode;\nlet gainNode: GainNode;\n\n// Import assets\nimport discoMusicSrc from \"./assets/disco-music.mp3\";\nimport explosionSoundSrc from \"./assets/explosion.mp3\";\n\n// Load audio files\nconst discoMusic = new Audio(discoMusicSrc);\nconst explosionSound = new Audio(explosionSoundSrc);\n\n// DOM Elements\nconst welcomeScreen = document.getElementById(\"welcome-screen\")!;\nconst orientationScreen = document.getElementById(\"orientation-screen\")!;\nconst gameScreen = document.getElementById(\"game-screen\")!;\nconst gameoverScreen = document.getElementById(\"gameover-screen\")!;\nconst gameoverActions = document.getElementById(\"gameover-actions\")!;\nconst startButton = document.getElementById(\"start-button\")!;\nconst restartButton = document.getElementById(\"restart-button\")!;\nconst installButton = document.getElementById(\"install-button\")!;\nconst skyVideo = document.querySelector<HTMLVideoElement>(\"#sky-video\")!;\nconst copilot = document.querySelector<HTMLImageElement>(\"#copilot\")!;\nconst detectionBar = document.getElementById(\"detection-bar\")!;\nconst timeCounter = document.getElementById(\"time-counter\")!;\nconst finalScore = document.getElementById(\"final-score\")!;\n\n// Create debug window\nconst debugWindow = document.createElement(\"div\");\ndebugWindow.id = \"debug-window\";\ndebugWindow.style.display = DEBUG_MODE ? \"block\" : \"none\";\ndocument.body.appendChild(debugWindow);\n\n// PWA Installation\nlet deferredPrompt: any;\n\nwindow.addEventListener(\"beforeinstallprompt\", (e) => {\n  e.preventDefault();\n  deferredPrompt = e;\n  installButton.style.display = \"block\";\n});\n\ninstallButton.addEventListener(\"click\", async () => {\n  if (deferredPrompt) {\n    deferredPrompt.prompt();\n    const { outcome } = await deferredPrompt.userChoice;\n    if (outcome === \"accepted\") {\n      console.log(\"Application installée\");\n    }\n    deferredPrompt = null;\n    installButton.style.display = \"none\";\n  }\n});\n\nwindow.addEventListener(\"appinstalled\", () => {\n  console.log(\"Application installée avec succès\");\n  installButton.style.display = \"none\";\n  deferredPrompt = null;\n});\n\n// Game functions\nfunction showScreen(screenId: Screen) {\n  [welcomeScreen, orientationScreen, gameScreen, gameoverScreen].forEach(\n    (screen) => {\n      screen.classList.add(\"hidden\");\n    }\n  );\n  document.getElementById(screenId)!.classList.remove(\"hidden\");\n}\n\nfunction checkOrientation() {\n  if (window.innerHeight > window.innerWidth) {\n    landscapeMode = false;\n    if (gameState === \"playing\") {\n      showScreen(\"orientation-screen\");\n      // Pause game elements\n      stopDiscoMode();\n      skyVideo.pause();\n      if (engineSound) {\n        oscillator.stop();\n      }\n    }\n    return false;\n  } else {\n    landscapeMode = true;\n    // If we were in orientation screen and now in correct orientation\n    if (\n      document\n        .getElementById(\"orientation-screen\")\n        ?.classList.contains(\"hidden\") === false\n    ) {\n      if (gameState === \"playing\") {\n        // Resume game elements\n        showScreen(\"game-screen\");\n        skyVideo.play();\n        // Reinitialize audio context as it might have been stopped\n        if (engineSound) {\n          oscillator = engineSound.createOscillator();\n          oscillator.connect(gainNode);\n          oscillator.type = \"sawtooth\";\n          oscillator.start();\n        }\n        lastFrameTime = performance.now();\n        updateGameState(lastFrameTime);\n      } else {\n        showScreen(\n          gameState === \"welcome\" ? \"welcome-screen\" : \"gameover-screen\"\n        );\n      }\n    }\n    return true;\n  }\n}\n\nfunction updateDetectionBar() {\n  const percentage = (detectionLevel / DETECTION_MAX_TIME) * 100;\n  detectionBar.style.setProperty(\"--detection-percentage\", `${percentage}%`);\n}\n\nfunction startDiscoMode() {\n  navigator.vibrate(200);\n\n  if (isDiscoMode) {\n    if (discoTimeout) {\n      clearTimeout(discoTimeout);\n    }\n    discoTimeout = window.setTimeout(() => {\n      stopDiscoMode();\n    }, DISCO_COOLDOWN * 1000);\n    return;\n  }\n\n  isDiscoMode = true;\n  gameScreen.classList.add(\"disco-mode\");\n  discoMusic.currentTime = discoMusicPosition;\n  discoMusic.play();\n}\n\nfunction stopDiscoMode() {\n  if (!isDiscoMode) return;\n\n  isDiscoMode = false;\n  gameScreen.classList.remove(\"disco-mode\");\n  discoMusicPosition = discoMusic.currentTime;\n  discoMusic.pause();\n\n  if (discoTimeout) {\n    clearTimeout(discoTimeout);\n    discoTimeout = null;\n  }\n}\n\nfunction updateEngineSound() {\n  const baseFrequency = 100;\n  const frequencyRange = 50;\n  oscillator.frequency.value =\n    baseFrequency + (planeAssiette / MAX_TILT) * frequencyRange;\n}\n\nfunction updatePlaneAssiette() {\n  const now = Date.now();\n  if (now - lastTiltChange > PLANE_TILT_CHANGE_INTERVAL) {\n    targetPlaneAssiette = Math.random() * MAX_TILT * 2 - MAX_TILT;\n    lastTiltChange = now;\n  }\n\n  // Smoothly interpolate between current and target tilt\n  planeAssiette +=\n    (targetPlaneAssiette - planeAssiette) * TILT_SMOOTHING_FACTOR;\n}\n\nfunction updateCopilotPosition() {\n  // Calculate copilot movement speed based on plane tilt\n  const tiltPercentage = Math.abs(planeAssiette) / MAX_TILT;\n  const movementSpeed = COPILOT_BASE_SPEED * tiltPercentage;\n\n  // Get current position as percentage (default to 50 if not set)\n  const currentPosition = parseFloat(copilot.style.left) || 50;\n\n  // Calculate new position with both plane tilt and player compensation\n  let newPosition = currentPosition;\n\n  // 1. Mouvement dû à l'inclinaison de l'avion\n  if (planeAssiette !== 0) {\n    const planeTiltDirection = planeAssiette > 0 ? 1 : -1;\n    newPosition += planeTiltDirection * movementSpeed;\n  }\n\n  // 2. Compensation du joueur (dans la direction opposée)\n  // Si le joueur penche à gauche (négatif), on pousse le copilote vers la gauche\n  if (playerTilt !== 0) {\n    const compensationForce =\n      (playerTilt / MAX_TILT) * GYRO_COMPENSATION_FACTOR;\n    newPosition -= compensationForce; // On soustrait car on veut aller dans la direction du tilt\n  }\n\n  // Limit position to screen bounds (10% to 90% to keep copilot visible)\n  newPosition = Math.max(10, Math.min(90, newPosition));\n\n  // Update copilot position\n  copilot.style.left = `${newPosition}%`;\n\n  // Check if copilot hits the edges\n  if (newPosition <= 10 || newPosition >= 90) {\n    startDiscoMode();\n  }\n}\n\nfunction updateDebugInfo() {\n  if (!DEBUG_MODE) return;\n\n  debugWindow.innerHTML = `\n    <div class=\"debug-content\">\n      <h3>Debug Info</h3>\n      <p>Gyroscope (beta): ${playerTilt.toFixed(2)}°</p>\n      <p>Plane Tilt: ${planeAssiette.toFixed(2)}°</p>\n      <p>Copilot Position: ${(parseFloat(copilot.style.left) || 50).toFixed(\n        2\n      )}%</p>\n    </div>\n  `;\n}\n\nfunction updateGameState(timestamp: number) {\n  if (gameState === \"playing\" && landscapeMode) {\n    // Calculate delta time in seconds\n    const deltaTime = (timestamp - lastFrameTime) / 1000;\n    if (deltaTime >= 1 / 60) {\n      lastFrameTime = timestamp;\n\n      // Update current time\n      currentTime = (timestamp - gameStartTime) / 100;\n      timeCounter.textContent = currentTime.toFixed(0);\n\n      updatePlaneAssiette();\n      updateCopilotPosition();\n      updateEngineSound();\n      updateDebugInfo();\n\n      if (isDiscoMode) {\n        detectionLevel += deltaTime; // Use actual time elapsed instead of fixed 1/60\n      }\n      updateDetectionBar();\n      if (detectionLevel >= DETECTION_MAX_TIME) {\n        gameState = \"gameover\";\n        handleGameOver();\n      }\n\n      // Update only sky video rotation, not the cockpit\n      skyVideo.style.transform = `rotate(${-planeAssiette}deg)`;\n    }\n\n    requestAnimationFrame(updateGameState);\n  }\n}\n\nfunction handleDeviceOrientation(event: DeviceOrientationEvent) {\n  if (gameState === \"playing\") {\n    // En mode paysage, beta contrôle l'inclinaison gauche/droite\n    playerTilt = event.beta || 0;\n\n    const beta = event.beta || 0;\n    const gamma = event.gamma || 0;\n\n    const inclinationRadians = Math.atan2(\n      Math.sin((gamma * Math.PI) / 180),\n      Math.tan((beta * Math.PI) / 180)\n    );\n    const inclinationDegrees = (inclinationRadians * 180) / Math.PI;\n\n    // Lissage\n    playerTilt =\n      playerTilt * (1 - PLAYER_TILT_SMOOTHING_FACTOR) +\n      inclinationDegrees * PLAYER_TILT_SMOOTHING_FACTOR;\n  }\n}\n\nfunction requestFullscreen() {\n  const element = document.documentElement as HTMLElement & {\n    mozRequestFullScreen(): Promise<void>;\n    webkitRequestFullscreen(): Promise<void>;\n    msRequestFullscreen(): Promise<void>;\n  };\n  if (element.requestFullscreen) {\n    element.requestFullscreen();\n  } else if (element.mozRequestFullScreen) {\n    element.mozRequestFullScreen();\n  } else if (element.webkitRequestFullscreen) {\n    element.webkitRequestFullscreen();\n  } else if (element.msRequestFullscreen) {\n    element.msRequestFullscreen();\n  }\n}\n\nfunction startGame() {\n  gameState = \"playing\";\n  detectionLevel = 0;\n  planeAssiette = 0;\n  targetPlaneAssiette = 0;\n  isDiscoMode = false;\n  lastFrameTime = performance.now();\n  gameStartTime = lastFrameTime;\n  currentTime = 0;\n\n  // Initialize audio context after user interaction\n  engineSound = new AudioContext();\n  oscillator = engineSound.createOscillator();\n  gainNode = engineSound.createGain();\n  oscillator.connect(gainNode);\n  gainNode.connect(engineSound.destination);\n  oscillator.type = \"sawtooth\";\n  gainNode.gain.value = 0.1;\n\n  // Hack: start and pause the audio to force initialization on iOS\n  discoMusic.play();\n  discoMusic.pause();\n  explosionSound.play();\n  explosionSound.pause();\n\n  gameoverActions.classList.add(\"hidden\");\n  copilot.style.left = \"50%\";\n\n  showScreen(\"game-screen\");\n  skyVideo.play();\n  oscillator.start();\n\n  requestFullscreen();\n  checkOrientation();\n\n  requestAnimationFrame(updateGameState); // Start the game loop\n}\n\nfunction handleGameOver() {\n  gameState = \"gameover\";\n  finalScore.textContent = `Score: ${currentTime.toFixed(2)}`;\n  showScreen(\"gameover-screen\");\n  stopDiscoMode();\n  oscillator.stop();\n  explosionSound.play();\n\n  setTimeout(() => {\n    gameoverActions.classList.remove(\"hidden\");\n  }, 1000);\n}\n\n// Event Listeners\nstartButton.addEventListener(\"click\", startGame);\nrestartButton.addEventListener(\"click\", startGame);\nwindow.addEventListener(\"orientationchange\", () => {\n  // Wait for the orientation change to complete\n  setTimeout(checkOrientation, 100);\n});\nwindow.addEventListener(\"resize\", () => {\n  // Wait for the resize to complete\n  setTimeout(checkOrientation, 100);\n});\nwindow.addEventListener(\"deviceorientation\", handleDeviceOrientation);\n\n// Initialize\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  showScreen(\"welcome-screen\");\n\n  // Request device orientation permission on iOS\n  if (typeof (DeviceOrientationEvent as any).requestPermission === \"function\") {\n    startButton.addEventListener(\"click\", async () => {\n      try {\n        const permission = await (\n          DeviceOrientationEvent as any\n        ).requestPermission();\n        if (permission === \"granted\") {\n          startGame();\n        }\n      } catch (error) {\n        console.error(\"Permission denied:\", error);\n      }\n    });\n  }\n});\n"],"names":["discoMusicSrc","explosionSoundSrc","MAX_TILT","DETECTION_MAX_TIME","DISCO_COOLDOWN","COPILOT_BASE_SPEED","PLANE_TILT_CHANGE_INTERVAL","TILT_SMOOTHING_FACTOR","PLAYER_TILT_SMOOTHING_FACTOR","GYRO_COMPENSATION_FACTOR","gameState","landscapeMode","planeAssiette","targetPlaneAssiette","detectionLevel","isDiscoMode","discoTimeout","lastTiltChange","playerTilt","discoMusicPosition","lastFrameTime","gameStartTime","currentTime","engineSound","oscillator","gainNode","discoMusic","explosionSound","welcomeScreen","orientationScreen","gameScreen","gameoverScreen","gameoverActions","startButton","restartButton","installButton","skyVideo","copilot","detectionBar","timeCounter","finalScore","debugWindow","deferredPrompt","outcome","showScreen","screenId","screen","checkOrientation","stopDiscoMode","_a","updateGameState","updateDetectionBar","percentage","startDiscoMode","updateEngineSound","updatePlaneAssiette","now","updateCopilotPosition","tiltPercentage","movementSpeed","newPosition","planeTiltDirection","compensationForce","timestamp","deltaTime","handleGameOver","handleDeviceOrientation","event","beta","gamma","inclinationDegrees","requestFullscreen","element","startGame","error"],"mappings":"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"}