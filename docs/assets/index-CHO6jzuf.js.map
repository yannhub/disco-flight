{"version":3,"file":"index-CHO6jzuf.js","sources":["../../src/assets/disco-music.mp3","../../src/assets/explosion.mp3","../../src/main.ts"],"sourcesContent":["export default \"__VITE_ASSET__DvnbOQ5g__\"","export default \"__VITE_ASSET__qcV2XDW4__\"","import \"./style.css\";\n\n// Types\ntype GameState = \"welcome\" | \"playing\" | \"gameover\";\ntype Screen =\n  | \"welcome-screen\"\n  | \"orientation-screen\"\n  | \"game-screen\"\n  | \"gameover-screen\";\n\n// Constants\nconst MAX_TILT = 45;\nconst DETECTION_MAX_TIME = 15; // seconds\nconst DISCO_COOLDOWN = 3; // seconds\nconst COPILOT_BASE_SPEED = 2.5; // Base speed for copilot movement\nconst PLANE_TILT_CHANGE_INTERVAL = 1000; // ms\nconst PLANE_TILT_SMOOTHING_FACTOR = 20; // Controls how smoothly the tilt changes\nconst PLAYER_TILT_SMOOTHING_FACTOR = 0.01;\nconst GYRO_COMPENSATION_FACTOR = -3; // Force de la compensation gyroscopique\nconst DEBUG_MODE = false; // Flag pour afficher/masquer la fenêtre de debug\nconst PLANE_TILT_THRESHOLD = 0.5; // Threshold to stop oscillation\n\n// Game variables\nlet gameState: GameState = \"welcome\";\nlet landscapeMode = false;\nlet planeAssiette = 0;\nlet targetPlaneAssiette = 0; // New variable to store the target tilt\nlet planeTiltSpeed = PLANE_TILT_SMOOTHING_FACTOR;\nlet detectionLevel = 0;\nlet isDiscoMode = false;\nlet discoTimeout: number | null = null;\nlet lastTiltChange = Date.now();\nlet playerTilt = 0; // Nouvelle variable pour stocker l'inclinaison du joueur\nlet discoMusicPosition = 0; // Store the music position when pausing\nlet lastFrameTime = 0; // Store last frame timestamp\nlet deltaTime = 0;\nlet gameStartTime = 0;\nlet currentTime = 0;\n\n// Wakelock\nlet wakeLock: WakeLockSentinel | null;\n\n// Audio elements\nlet engineSound: AudioContext;\nlet oscillator: OscillatorNode;\nlet gainNode: GainNode;\n\n// Import assets\nimport discoMusicSrc from \"./assets/disco-music.mp3\";\nimport explosionSoundSrc from \"./assets/explosion.mp3\";\n\n// Load audio files\nconst discoMusic = new Audio(discoMusicSrc);\nconst explosionSound = new Audio(explosionSoundSrc);\n\n// DOM Elements\nconst welcomeScreen = document.getElementById(\"welcome-screen\")!;\nconst orientationScreen = document.getElementById(\"orientation-screen\")!;\nconst gameScreen = document.getElementById(\"game-screen\")!;\nconst gameoverScreen = document.getElementById(\"gameover-screen\")!;\nconst gameoverActions = document.getElementById(\"gameover-actions\")!;\nconst startButton = document.getElementById(\"start-button\")!;\nconst restartButton = document.getElementById(\"restart-button\")!;\nconst installButton = document.getElementById(\"install-button\")!;\nconst skyVideo = document.querySelector<HTMLVideoElement>(\"#sky-video\")!;\nconst copilot = document.querySelector<HTMLImageElement>(\"#copilot\")!;\nconst detectionBar = document.getElementById(\"detection-bar\")!;\nconst timeCounter = document.getElementById(\"time-counter\")!;\nconst finalScore = document.getElementById(\"final-score\")!;\n\n// Create debug window\nconst debugWindow = document.createElement(\"div\");\ndebugWindow.id = \"debug-window\";\ndebugWindow.style.display = DEBUG_MODE ? \"block\" : \"none\";\ndocument.body.appendChild(debugWindow);\n\n// PWA Installation\nlet deferredPrompt: any;\n\nwindow.addEventListener(\"beforeinstallprompt\", (e) => {\n  e.preventDefault();\n  deferredPrompt = e;\n  installButton.style.display = \"block\";\n});\n\ninstallButton.addEventListener(\"click\", async () => {\n  if (deferredPrompt) {\n    deferredPrompt.prompt();\n    const { outcome } = await deferredPrompt.userChoice;\n    if (outcome === \"accepted\") {\n      console.log(\"Application installée\");\n    }\n    deferredPrompt = null;\n    installButton.style.display = \"none\";\n  }\n});\n\nwindow.addEventListener(\"appinstalled\", () => {\n  console.log(\"Application installée avec succès\");\n  installButton.style.display = \"none\";\n  deferredPrompt = null;\n});\n\n// Game functions\nfunction showScreen(screenId: Screen) {\n  [welcomeScreen, orientationScreen, gameScreen, gameoverScreen].forEach(\n    (screen) => {\n      screen.classList.add(\"hidden\");\n    }\n  );\n  document.getElementById(screenId)!.classList.remove(\"hidden\");\n}\n\nfunction checkOrientation() {\n  if (window.innerHeight > window.innerWidth) {\n    landscapeMode = false;\n    if (gameState === \"playing\") {\n      showScreen(\"orientation-screen\");\n      // Pause game elements\n      stopDiscoMode();\n      skyVideo.pause();\n      if (engineSound) {\n        oscillator.stop();\n      }\n    }\n    return false;\n  } else {\n    landscapeMode = true;\n    // If we were in orientation screen and now in correct orientation\n    if (\n      document\n        .getElementById(\"orientation-screen\")\n        ?.classList.contains(\"hidden\") === false\n    ) {\n      if (gameState === \"playing\") {\n        // Resume game elements\n        showScreen(\"game-screen\");\n        skyVideo.play();\n        // Reinitialize audio context as it might have been stopped\n        if (engineSound) {\n          initOscillator();\n          oscillator.start();\n        }\n        lastFrameTime = performance.now();\n        updateGameState(lastFrameTime);\n      } else {\n        showScreen(\n          gameState === \"welcome\" ? \"welcome-screen\" : \"gameover-screen\"\n        );\n      }\n    }\n    return true;\n  }\n}\n\nfunction updateDetectionBar() {\n  if (isDiscoMode) {\n    detectionLevel += deltaTime; // Use actual time elapsed instead of fixed 1/60\n  }\n  const percentage = (detectionLevel / DETECTION_MAX_TIME) * 100;\n  detectionBar.style.setProperty(\"--detection-percentage\", `${percentage}%`);\n}\n\nfunction startDiscoMode() {\n  if (navigator.vibrate) {\n    navigator.vibrate(200);\n  }\n\n  if (isDiscoMode) {\n    if (discoTimeout) {\n      clearTimeout(discoTimeout);\n    }\n    discoTimeout = window.setTimeout(() => {\n      stopDiscoMode();\n    }, DISCO_COOLDOWN * 1000);\n    return;\n  }\n\n  isDiscoMode = true;\n  gameScreen.classList.add(\"disco-mode\");\n  discoMusic.currentTime = discoMusicPosition;\n  discoMusic.play();\n}\n\nfunction stopDiscoMode() {\n  if (!isDiscoMode) return;\n\n  isDiscoMode = false;\n  gameScreen.classList.remove(\"disco-mode\");\n  discoMusicPosition = discoMusic.currentTime;\n  discoMusic.pause();\n\n  if (discoTimeout) {\n    clearTimeout(discoTimeout);\n    discoTimeout = null;\n  }\n}\n\nfunction updateEngineSound() {\n  const baseFrequency = 100;\n  const frequencyRange = 50;\n  oscillator.frequency.value =\n    baseFrequency + (planeAssiette / MAX_TILT) * frequencyRange;\n}\n\nfunction updatePlaneAssiette() {\n  const now = Date.now();\n  if (now - lastTiltChange > PLANE_TILT_CHANGE_INTERVAL) {\n    targetPlaneAssiette = Math.random() * MAX_TILT * 2 - MAX_TILT;\n    lastTiltChange = now;\n    planeTiltSpeed =\n      Math.random() * PLANE_TILT_SMOOTHING_FACTOR + PLANE_TILT_SMOOTHING_FACTOR;\n  }\n\n  if (Math.abs(targetPlaneAssiette - planeAssiette) > PLANE_TILT_THRESHOLD) {\n    if (targetPlaneAssiette > planeAssiette) {\n      planeAssiette += deltaTime * planeTiltSpeed;\n    } else {\n      planeAssiette -= deltaTime * planeTiltSpeed;\n    }\n  }\n\n  // Update only sky video rotation, not the cockpit\n  skyVideo.style.transform = `rotate(${-planeAssiette}deg)`;\n}\n\nfunction updateCopilotPosition() {\n  // Calculate copilot movement speed based on plane tilt\n  const tiltPercentage = Math.abs(planeAssiette) / MAX_TILT;\n  const movementSpeed = COPILOT_BASE_SPEED * tiltPercentage;\n\n  // Get current position as percentage (default to 50 if not set)\n  const currentPosition = parseFloat(copilot.style.left) || 50;\n\n  // Calculate new position with both plane tilt and player compensation\n  let newPosition = currentPosition;\n\n  // 1. Mouvement dû à l'inclinaison de l'avion\n  if (planeAssiette !== 0) {\n    const planeTiltDirection = planeAssiette > 0 ? 1 : -1;\n    newPosition += planeTiltDirection * movementSpeed;\n  }\n\n  // 2. Compensation du joueur (dans la direction opposée)\n  // Si le joueur penche à gauche (négatif), on pousse le copilote vers la gauche\n  if (playerTilt !== 0) {\n    const compensationForce =\n      (playerTilt / MAX_TILT) * GYRO_COMPENSATION_FACTOR;\n    newPosition -= compensationForce; // On soustrait car on veut aller dans la direction du tilt\n  }\n\n  // Limit position to screen bounds (10% to 90% to keep copilot visible)\n  newPosition = Math.max(10, Math.min(90, newPosition));\n\n  // Update copilot position\n  copilot.style.left = `${newPosition}%`;\n\n  // Check if copilot hits the edges\n  if (newPosition <= 13 || newPosition >= 87) {\n    startDiscoMode();\n  }\n}\n\nfunction updateDebugInfo() {\n  if (!DEBUG_MODE) return;\n\n  debugWindow.innerHTML = `\n    <div class=\"debug-content\">\n      <h3>Debug Info</h3>\n      <p>Gyroscope (beta): ${playerTilt.toFixed(2)}°</p>\n      <p>Plane Tilt: ${planeAssiette.toFixed(2)}°</p>\n      <p>Copilot Position: ${(parseFloat(copilot.style.left) || 50).toFixed(\n        2\n      )}%</p>\n    </div>\n  `;\n}\n\nfunction updateGameState(timestamp: number) {\n  if (gameState === \"playing\" && landscapeMode) {\n    // Calculate delta time in seconds\n    deltaTime = (timestamp - lastFrameTime) / 1000;\n    lastFrameTime = timestamp;\n\n    // Update current time\n    currentTime = (timestamp - gameStartTime) / 100;\n    timeCounter.textContent = currentTime.toFixed(0);\n\n    updatePlaneAssiette();\n    updateCopilotPosition();\n    updateEngineSound();\n    updateDebugInfo();\n    updateDetectionBar();\n\n    if (detectionLevel >= DETECTION_MAX_TIME) {\n      gameState = \"gameover\";\n      handleGameOver();\n    }\n\n    requestAnimationFrame(updateGameState);\n  }\n}\n\nfunction handleDeviceOrientation(event: DeviceOrientationEvent) {\n  if (gameState === \"playing\") {\n    // En mode paysage, beta contrôle l'inclinaison gauche/droite\n    playerTilt = event.beta || 0;\n\n    const beta = event.beta || 0;\n    const gamma = event.gamma || 0;\n\n    const inclinationRadians = Math.atan2(\n      Math.sin((gamma * Math.PI) / 180),\n      Math.tan((beta * Math.PI) / 180)\n    );\n    const inclinationDegrees = (inclinationRadians * 180) / Math.PI;\n\n    // Lissage\n    playerTilt =\n      playerTilt * (1 - PLAYER_TILT_SMOOTHING_FACTOR) +\n      inclinationDegrees * PLAYER_TILT_SMOOTHING_FACTOR;\n  }\n}\n\nfunction requestFullscreen() {\n  const element = document.documentElement as HTMLElement & {\n    mozRequestFullScreen(): Promise<void>;\n    webkitRequestFullscreen(): Promise<void>;\n    msRequestFullscreen(): Promise<void>;\n  };\n  if (element.requestFullscreen) {\n    element.requestFullscreen();\n  } else if (element.mozRequestFullScreen) {\n    element.mozRequestFullScreen();\n  } else if (element.webkitRequestFullscreen) {\n    element.webkitRequestFullscreen();\n  } else if (element.msRequestFullscreen) {\n    element.msRequestFullscreen();\n  }\n}\n\nfunction exitFullscreen() {\n  if (document.exitFullscreen) {\n    document.exitFullscreen();\n  } else if ((document as any).mozCancelFullScreen) {\n    (document as any).mozCancelFullScreen();\n  } else if ((document as any).webkitExitFullscreen) {\n    (document as any).webkitExitFullscreen();\n  } else if ((document as any).msExitFullscreen) {\n    (document as any).msExitFullscreen();\n  }\n}\n\nfunction toggleFullscreen() {\n  if (!document.fullscreenElement) {\n    requestFullscreen();\n  } else {\n    exitFullscreen();\n  }\n}\n\ndocument\n  .getElementById(\"toggle-fullscreen-orientation\")\n  ?.addEventListener(\"click\", toggleFullscreen);\ndocument\n  .getElementById(\"toggle-fullscreen-gameover\")\n  ?.addEventListener(\"click\", toggleFullscreen);\n\nasync function startGame() {\n  gameState = \"playing\";\n  detectionLevel = 0;\n  planeAssiette = 0;\n  targetPlaneAssiette = 0;\n  isDiscoMode = false;\n  lastFrameTime = performance.now();\n  gameStartTime = lastFrameTime;\n  currentTime = 0;\n\n  // Empeche l'ecran de se mettre en veille\n  if (\"wakeLock\" in navigator) {\n    wakeLock = await navigator.wakeLock.request(\"screen\");\n  }\n\n  // Initialize audio context after user interaction\n  engineSound = new AudioContext();\n  gainNode = engineSound.createGain();\n  gainNode.connect(engineSound.destination);\n  gainNode.gain.value = 0.1;\n  initOscillator();\n\n  // Hack: start and pause the audio to force initialization on iOS\n  discoMusic.play();\n  discoMusic.pause();\n  explosionSound.play();\n  explosionSound.pause();\n\n  gameoverActions.classList.add(\"hidden\");\n  copilot.style.left = \"50%\";\n\n  showScreen(\"game-screen\");\n  skyVideo.play();\n  oscillator.start();\n\n  requestFullscreen();\n  checkOrientation();\n\n  requestAnimationFrame(updateGameState); // Start the game loop\n}\n\nfunction initOscillator() {\n  oscillator = engineSound.createOscillator();\n  oscillator.connect(gainNode);\n  oscillator.type = \"sawtooth\";\n}\n\nfunction handleGameOver() {\n  gameState = \"gameover\";\n  finalScore.textContent = `Score: ${currentTime.toFixed(2)}`;\n  showScreen(\"gameover-screen\");\n  stopDiscoMode();\n  oscillator.stop();\n  explosionSound.play();\n\n  if (wakeLock) {\n    wakeLock.release().then(() => {\n      wakeLock = null;\n    });\n  }\n\n  setTimeout(() => {\n    gameoverActions.classList.remove(\"hidden\");\n  }, 1000);\n}\n\n// Event Listeners\nstartButton.addEventListener(\"click\", startGame);\nrestartButton.addEventListener(\"click\", startGame);\nwindow.addEventListener(\"orientationchange\", () => {\n  // Wait for the orientation change to complete\n  setTimeout(checkOrientation, 100);\n});\nwindow.addEventListener(\"resize\", () => {\n  // Wait for the resize to complete\n  setTimeout(checkOrientation, 100);\n});\nwindow.addEventListener(\"deviceorientation\", handleDeviceOrientation);\n\n// Initialize\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  showScreen(\"welcome-screen\");\n\n  // Request device orientation permission on iOS\n  if (typeof (DeviceOrientationEvent as any).requestPermission === \"function\") {\n    startButton.addEventListener(\"click\", async () => {\n      try {\n        const permission = await (\n          DeviceOrientationEvent as any\n        ).requestPermission();\n        if (permission === \"granted\") {\n          startGame();\n        }\n      } catch (error) {\n        console.error(\"Permission denied:\", error);\n      }\n    });\n  }\n});\n"],"names":["discoMusicSrc","explosionSoundSrc","MAX_TILT","DETECTION_MAX_TIME","DISCO_COOLDOWN","COPILOT_BASE_SPEED","PLANE_TILT_CHANGE_INTERVAL","PLANE_TILT_SMOOTHING_FACTOR","PLAYER_TILT_SMOOTHING_FACTOR","GYRO_COMPENSATION_FACTOR","PLANE_TILT_THRESHOLD","gameState","landscapeMode","planeAssiette","targetPlaneAssiette","planeTiltSpeed","detectionLevel","isDiscoMode","discoTimeout","lastTiltChange","playerTilt","discoMusicPosition","lastFrameTime","deltaTime","gameStartTime","currentTime","wakeLock","engineSound","oscillator","gainNode","discoMusic","explosionSound","welcomeScreen","orientationScreen","gameScreen","gameoverScreen","gameoverActions","startButton","restartButton","installButton","skyVideo","copilot","detectionBar","timeCounter","finalScore","debugWindow","deferredPrompt","outcome","showScreen","screenId","screen","checkOrientation","stopDiscoMode","_a","initOscillator","updateGameState","updateDetectionBar","percentage","startDiscoMode","updateEngineSound","updatePlaneAssiette","now","updateCopilotPosition","tiltPercentage","movementSpeed","newPosition","planeTiltDirection","compensationForce","timestamp","handleGameOver","handleDeviceOrientation","event","beta","gamma","inclinationDegrees","requestFullscreen","element","exitFullscreen","toggleFullscreen","startGame","error"],"mappings":"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"}